# Development Dockerfile mit Air Hot Reload - Optimiert für gRPC
FROM golang:1.21-alpine

# Install essential tools + file watching dependencies
RUN apk add --no-cache \
	protobuf-dev \
	git \
	curl \
	unzip \
	netcat-openbsd \
	ca-certificates \
	inotify-tools

# Install Go tools - pinned versions for stability
RUN go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.31.0 && \
	go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.3.0 && \
	go install github.com/cosmtrek/air@v1.49.0

# Install protoc-gen-grpc-web für Frontend Proto Generation
RUN curl -sSL https://github.com/grpc/grpc-web/releases/download/1.4.2/protoc-gen-grpc-web-1.4.2-linux-x86_64 \
	-o /usr/local/bin/protoc-gen-grpc-web && \
	chmod +x /usr/local/bin/protoc-gen-grpc-web

WORKDIR /app

# Copy go.mod und go.sum zuerst für besseres Layer Caching
COPY server/go.mod ./

# Download dependencies
RUN go mod download

# Copy server code
COPY server/ ./

# Copy proto files und generate Go code
COPY proto ./proto
RUN mkdir -p pb && \
	protoc \
	--go_out=pb \
	--go_opt=paths=source_relative \
	--go-grpc_out=pb \
	--go-grpc_opt=paths=source_relative \
	--proto_path=proto \
	proto/*.proto

RUN go mod tidy
# Verify generated files
RUN ls -la pb/ && echo "Proto files generated successfully"

# Create tmp directory for Air
RUN mkdir -p tmp

# Development Environment Variables
ENV GO_ENV=development
ENV GODEBUG=netdns=go
ENV CGO_ENABLED=0

# File watching optimization for Docker
ENV WATCHEXEC_POLL_INTERVAL=1000

# Expose gRPC and gRPC-Web ports
EXPOSE ${BACKEND_PORT} ${GRPC_WEB_PORT}

# Health check für gRPC
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
	CMD nc -z localhost ${BACKEND_PORT} && nc -z localhost ${GRPC_WEB_PORT} || exit 1

# Air für Hot Reload
CMD ["air", "-c", ".air.toml"]
