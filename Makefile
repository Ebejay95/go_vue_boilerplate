.PHONY: build up down logs clean proto clean-proto clean-all help dev dev-up dev-down dev-logs dev-rebuild dev-status dev-clean

RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
MAGENTA := \033[0;35m
CYAN := \033[0;36m
WHITE := \033[0;37m
BOLD := \033[1m
RESET := \033[0m

define print_status
	@echo "$(CYAN)$(BOLD)[INFO]$(RESET) $(1)"
endef

define print_success
	@echo "$(GREEN)$(BOLD)[SUCCESS]$(RESET) $(1)"
endef

define print_error
	@echo "$(RED)$(BOLD)[ERROR]$(RESET) $(1)"
endef

define print_warning
	@echo "$(YELLOW)$(BOLD)[WARNING]$(RESET) $(1)"
endef

# ===========================================
# PRODUCTION COMMANDS
# ===========================================

all: up

up: clean-proto
	$(call print_status,"Building and starting all services...")
	$(call print_warning,"Proto files will be generated by Docker during build...")
	docker-compose up --build
	$(call print_success,"Services started successfully!")

up-detached: clean-proto
	$(call print_status,"Building and starting services in detached mode...")
	$(call print_warning,"Proto files will be generated by Docker during build...")
	docker-compose up --build -d
	$(call print_success,"Services running in background!")

down:
	$(call print_status,"Stopping all services...")
	docker-compose down
	$(call print_success,"Services stopped!")

logs:
	$(call print_status,"Showing logs...")
	docker-compose logs -f

logs-server:
	$(call print_status,"Showing gRPC server logs...")
	docker-compose logs -f backend-grpc-server

logs-frontend:
	$(call print_status,"Showing frontend logs...")
	docker-compose logs -f frontend

# ===========================================
# DEVELOPMENT COMMANDS (HOT RELOAD)
# ===========================================

dev: dev-clean dev-up

dev-up: clean-proto
	$(call print_status,"Starting development environment with HOT RELOAD...")
	$(call print_warning,"This will enable aggressive file watching for hot reload")
	@echo "$(YELLOW)If hot reload doesn't work, try: make dev-rebuild$(RESET)"
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml up --build

dev-up-detached: clean-proto
	$(call print_status,"Starting development environment in detached mode...")
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml up --build -d
	$(call print_success,"Development environment running in background!")
	@echo "$(CYAN)View logs with: make dev-logs$(RESET)"
	@echo "$(CYAN)Access frontend: http://localhost:$(shell grep FRONTEND_PORT .env | cut -d'=' -f2)$(RESET)"

dev-down:
	$(call print_status,"Stopping development environment...")
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml down
	$(call print_success,"Development environment stopped!")

dev-logs:
	$(call print_status,"Showing development logs...")
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml logs -f

dev-logs-backend:
	$(call print_status,"Showing backend development logs...")
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml logs -f backend-grpc-server

dev-logs-frontend:
	$(call print_status,"Showing frontend development logs...")
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml logs -f frontend

# ===========================================
# DEVELOPMENT REBUILD & RESTART
# ===========================================

dev-rebuild: dev-down clean-volumes dev-up-detached
	$(call print_success,"Development environment completely rebuilt!")

dev-rebuild-frontend:
	$(call print_status,"Rebuilding frontend for development...")
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml stop frontend
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml rm -f frontend
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml build --no-cache frontend
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d frontend
	$(call print_success,"Frontend rebuilt and restarted!")
	@echo "$(CYAN)Follow logs with: make dev-logs-frontend$(RESET)"

dev-rebuild-backend:
	$(call print_status,"Rebuilding backend for development...")
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml stop backend-grpc-server
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml rm -f backend-grpc-server
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml build --no-cache backend-grpc-server
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d backend-grpc-server
	$(call print_success,"Backend rebuilt and restarted!")
	@echo "$(CYAN)Follow logs with: make dev-logs-backend$(RESET)"

dev-restart:
	$(call print_status,"Restarting development containers...")
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml restart
	$(call print_success,"Development containers restarted!")

dev-restart-frontend:
	$(call print_status,"Restarting frontend container...")
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml restart frontend
	$(call print_success,"Frontend container restarted!")

dev-restart-backend:
	$(call print_status,"Restarting backend container...")
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml restart backend-grpc-server
	$(call print_success,"Backend container restarted!")

# ===========================================
# DEVELOPMENT DEBUGGING
# ===========================================

dev-shell-frontend:
	$(call print_status,"Opening shell in frontend container...")
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml exec frontend sh

dev-shell-backend:
	$(call print_status,"Opening shell in backend container...")
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml exec backend-grpc-server sh

dev-status:
	$(call print_status,"Development environment status:")
	@docker-compose -f docker-compose.yml -f docker-compose.dev.yml ps
	@echo ""
	$(call print_status,"Volume information:")
	@docker volume ls | grep $(shell grep APP_NAME .env | cut -d'=' -f2) || echo "$(YELLOW)No volumes found$(RESET)"
	@echo ""
	$(call print_status,"Port information:")
	@echo "Frontend: http://localhost:$(shell grep FRONTEND_PORT .env | cut -d'=' -f2)"
	@echo "Backend gRPC: localhost:$(shell grep BACKEND_PORT .env | cut -d'=' -f2)"
	@echo "gRPC-Web: http://localhost:$(shell grep GRPC_WEB_PORT .env | cut -d'=' -f2)"

# Hot Reload troubleshooting
dev-hotreload-test:
	$(call print_status,"Testing hot reload functionality...")
	@echo "$(YELLOW)Testing if containers can detect file changes...$(RESET)"
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml exec frontend sh -c "touch /app/src/test-hotreload.txt && ls -la /app/src/test-hotreload.txt && rm /app/src/test-hotreload.txt"
	@echo "$(GREEN)If you see the file, hot reload should work$(RESET)"

dev-fix-permissions:
	$(call print_status,"Fixing file permissions for hot reload...")
	@if [ "$(shell uname)" = "Linux" ]; then \
		sudo chown -R $(shell id -u):$(shell id -g) ./frontend/src ./frontend/public; \
		chmod -R 755 ./frontend/src ./frontend/public; \
		$(call print_success,"Permissions fixed for Linux"); \
	else \
		$(call print_warning,"Permission fix only needed on Linux"); \
	fi

# ===========================================
# PRODUCTION BUILD COMMANDS
# ===========================================

build-server: clean-proto
	$(call print_status,"Building gRPC server...")
	docker-compose build backend-grpc-server
	$(call print_success,"gRPC server built!")

build-frontend:
	$(call print_status,"Building frontend...")
	docker-compose build frontend
	$(call print_success,"Frontend built!")

restart-server:
	$(call print_status,"Restarting gRPC server...")
	docker-compose restart backend-grpc-server
	$(call print_success,"gRPC server restarted!")

restart-frontend:
	$(call print_status,"Restarting frontend...")
	docker-compose restart frontend
	$(call print_success,"Frontend restarted!")

# ===========================================
# CLEANUP COMMANDS
# ===========================================

clean-proto:
	$(call print_status,"Cleaning generated proto files...")
	@rm -rf server/pb/
	@rm -f server/go.sum
	$(call print_success,"Proto files cleaned!")

clean-go:
	$(call print_status,"Cleaning Go modules...")
	@rm -f server/go.sum
	@if command -v go >/dev/null 2>&1; then \
		cd server && go clean -modcache; \
	fi
	$(call print_success,"Go modules cleaned!")

clean-volumes:
	$(call print_status,"Cleaning development volumes...")
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v
	@docker volume rm $(shell grep APP_NAME .env | cut -d'=' -f2)-frontend-node-modules-dev 2>/dev/null || true
	@docker volume rm $(shell grep APP_NAME .env | cut -d'=' -f2)-go-mod-cache-dev 2>/dev/null || true
	$(call print_success,"Development volumes cleaned!")

dev-clean: clean-volumes

clean-docker:
	$(call print_status,"Cleaning Docker artifacts...")
	docker-compose down -v --rmi all --remove-orphans 2>/dev/null || true
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v --rmi all --remove-orphans 2>/dev/null || true
	docker system prune -f
	$(call print_success,"Docker artifacts cleaned!")

clean-all: clean-proto clean-go clean-docker
	$(call print_success,"Complete cleanup finished!")

clean: clean-proto clean-go
	$(call print_success,"Development cleanup finished!")

# ===========================================
# PROTO COMMANDS
# ===========================================

proto:
	$(call print_status,"Proto files are generated automatically by Docker during build")
	$(call print_warning,"Run 'make dev-up' or 'make build-server' to generate proto files")

proto-extract:
	$(call print_status,"Extracting proto files from Docker container...")
	@mkdir -p server/pb
	@if docker ps -a --format "table {{.Names}}" | grep -q "backend-grpc-server"; then \
		docker cp $$(docker-compose ps -q backend-grpc-server):/app/pb/. server/pb/ && \
		$(call print_success,"Proto files extracted successfully!"); \
	else \
		$(call print_error,"gRPC server container not found. Run 'make dev-up' first."); \
	fi

# ===========================================
# TESTING & MONITORING
# ===========================================

status:
	$(call print_status,"Service status:")
	@docker-compose ps
	@echo ""
	$(call print_status,"Proto files:")
	@ls -la server/pb/ 2>/dev/null || echo "$(YELLOW)No proto files generated$(RESET)"
	@echo ""
	$(call print_status,"Go modules:")
	@ls -la server/go.sum 2>/dev/null && echo "$(GREEN)go.sum exists$(RESET)" || echo "$(YELLOW)go.sum missing$(RESET)"

test:
	$(call print_status,"Testing API endpoints...")
	@echo "$(YELLOW)Testing frontend...$(RESET)"
	@curl -s http://localhost:$(shell grep FRONTEND_PORT .env | cut -d'=' -f2) >/dev/null && echo "$(GREEN)✓ Frontend responding$(RESET)" || echo "$(RED)✗ Frontend not responding$(RESET)"
	@echo "$(YELLOW)Testing gRPC-Web...$(RESET)"
	@curl -s http://localhost:$(shell grep GRPC_WEB_PORT .env | cut -d'=' -f2) >/dev/null && echo "$(GREEN)✓ gRPC-Web responding$(RESET)" || echo "$(RED)✗ gRPC-Web not responding$(RESET)"

# ===========================================
# HELP COMMAND
# ===========================================

help:
	@echo "$(BOLD)Available commands:$(RESET)"
	@echo ""
	@echo "$(YELLOW)🚀 Quick Start:$(RESET)"
	@echo "  make dev              Start development with hot reload"
	@echo "  make up               Start production environment"
	@echo ""
	@echo "$(YELLOW)📦 Development:$(RESET)"
	@echo "  make dev-up           Start dev environment"
	@echo "  make dev-up-detached  Start dev environment in background"
	@echo "  make dev-down         Stop dev environment"
	@echo "  make dev-logs         Show all dev logs"
	@echo "  make dev-logs-frontend Show frontend logs"
	@echo "  make dev-logs-backend  Show backend logs"
	@echo "  make dev-rebuild      Completely rebuild dev environment"
	@echo "  make dev-restart      Restart dev containers"
	@echo "  make dev-status       Show dev environment status"
	@echo ""
	@echo "$(YELLOW)🔧 Debugging:$(RESET)"
	@echo "  make dev-shell-frontend   Open frontend container shell"
	@echo "  make dev-shell-backend    Open backend container shell"
	@echo "  make dev-hotreload-test   Test hot reload functionality"
	@echo "  make dev-fix-permissions  Fix file permissions (Linux)"
	@echo ""
	@echo "$(YELLOW)🏭 Production:$(RESET)"
	@echo "  make up               Start production environment"
	@echo "  make down             Stop all services"
	@echo "  make logs             Show production logs"
	@echo "  make build-frontend   Build frontend image"
	@echo "  make build-server     Build backend image"
	@echo ""
	@echo "$(YELLOW)🧹 Cleanup:$(RESET)"
	@echo "  make clean            Clean development files"
	@echo "  make clean-all        Complete cleanup (Docker + files)"
	@echo "  make clean-volumes    Clean development volumes"
	@echo ""
	@echo "$(YELLOW)📊 Monitoring:$(RESET)"
	@echo "  make status           Show service status"
	@echo "  make test             Test API endpoints"
	@echo ""
	@echo "$(CYAN)For hot reload issues, try: make dev-rebuild$(RESET)"
