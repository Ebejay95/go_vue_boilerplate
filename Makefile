.PHONY: build up down logs clean proto clean-proto clean-all help dev dev-up dev-down dev-logs dev-rebuild dev-status dev-clean

RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
MAGENTA := \033[0;35m
CYAN := \033[0;36m
WHITE := \033[0;37m
BOLD := \033[1m
RESET := \033[0m

define print_status
	@echo "$(CYAN)$(BOLD)[INFO]$(RESET) $(1)"
endef

define print_success
	@echo "$(GREEN)$(BOLD)[SUCCESS]$(RESET) $(1)"
endef

define print_error
	@echo "$(RED)$(BOLD)[ERROR]$(RESET) $(1)"
endef

define print_warning
	@echo "$(YELLOW)$(BOLD)[WARNING]$(RESET) $(1)"
endef

# ===========================================
# PRODUCTION COMMANDS
# ===========================================

all: up

up: clean-proto
	$(call print_status,"Building and starting all services...")
	$(call print_warning,"Proto files will be generated by Docker during build...")
	docker-compose up --build
	$(call print_success,"Services started successfully!")

up-detached: clean-proto
	$(call print_status,"Building and starting services in detached mode...")
	$(call print_warning,"Proto files will be generated by Docker during build...")
	docker-compose up --build -d
	$(call print_success,"Services running in background!")

down:
	$(call print_status,"Stopping all services...")
	docker-compose down
	$(call print_success,"Services stopped!")

logs:
	$(call print_status,"Showing logs...")
	docker-compose logs -f

logs-server:
	$(call print_status,"Showing gRPC server logs...")
	docker-compose logs -f backend-grpc-server

logs-frontend:
	$(call print_status,"Showing frontend logs...")
	docker-compose logs -f frontend

# ===========================================
# PRODUCTION BUILD COMMANDS
# ===========================================

build-server: clean-proto
	$(call print_status,"Building gRPC server...")
	docker-compose build backend-grpc-server
	$(call print_success,"gRPC server built!")

build-frontend:
	$(call print_status,"Building frontend...")
	docker-compose build frontend
	$(call print_success,"Frontend built!")

restart-server:
	$(call print_status,"Restarting gRPC server...")
	docker-compose restart backend-grpc-server
	$(call print_success,"gRPC server restarted!")

restart-frontend:
	$(call print_status,"Restarting frontend...")
	docker-compose restart frontend
	$(call print_success,"Frontend restarted!")

# ===========================================
# CLEANUP COMMANDS
# ===========================================

clean-proto:
	$(call print_status,"Cleaning generated proto files...")
	@rm -rf server/pb/
	@rm -f server/go.sum
	$(call print_success,"Proto files cleaned!")

clean-go:
	$(call print_status,"Cleaning Go modules...")
	@rm -f server/go.sum
	@if command -v go >/dev/null 2>&1; then \
		cd server && go clean -modcache; \
	fi
	$(call print_success,"Go modules cleaned!")

clean-volumes:
	$(call print_status,"Cleaning development volumes...")
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v
	@docker volume rm $(shell grep APP_NAME .env | cut -d'=' -f2)-frontend-node-modules-dev 2>/dev/null || true
	@docker volume rm $(shell grep APP_NAME .env | cut -d'=' -f2)-go-mod-cache-dev 2>/dev/null || true
	$(call print_success,"Development volumes cleaned!")

clean-docker:
	$(call print_status,"Cleaning Docker artifacts...")
	docker-compose down -v --rmi all --remove-orphans 2>/dev/null || true
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v --rmi all --remove-orphans 2>/dev/null || true
	docker system prune -f
	$(call print_success,"Docker artifacts cleaned!")

clean-all: clean-proto clean-go clean-docker
	$(call print_success,"Complete cleanup finished!")

clean: clean-proto clean-go
	$(call print_success,"Development cleanup finished!")

# ===========================================
# PROTO COMMANDS
# ===========================================

proto:
	$(call print_status,"Proto files are generated automatically by Docker during build")
	$(call print_warning,"Run 'make dev-up' or 'make build-server' to generate proto files")

proto-extract:
	$(call print_status,"Extracting proto files from Docker container...")
	@mkdir -p server/pb
	@if docker ps -a --format "table {{.Names}}" | grep -q "backend-grpc-server"; then \
		docker cp $$(docker-compose ps -q backend-grpc-server):/app/pb/. server/pb/ && \
		$(call print_success,"Proto files extracted successfully!"); \
	else \
		$(call print_error,"gRPC server container not found. Run 'make dev-up' first."); \
	fi

# ===========================================
# TESTING & MONITORING
# ===========================================

status:
	$(call print_status,"Service status:")
	@docker-compose ps
	@echo ""
	$(call print_status,"Proto files:")
	@ls -la server/pb/ 2>/dev/null || echo "$(YELLOW)No proto files generated$(RESET)"
	@echo ""
	$(call print_status,"Go modules:")
	@ls -la server/go.sum 2>/dev/null && echo "$(GREEN)go.sum exists$(RESET)" || echo "$(YELLOW)go.sum missing$(RESET)"

test:
	$(call print_status,"Testing API endpoints...")
	@echo "$(YELLOW)Testing frontend...$(RESET)"
	@curl -s http://localhost:$(shell grep FRONTEND_PORT .env | cut -d'=' -f2) >/dev/null && echo "$(GREEN)✓ Frontend responding$(RESET)" || echo "$(RED)✗ Frontend not responding$(RESET)"
	@echo "$(YELLOW)Testing gRPC-Web...$(RESET)"
	@curl -s http://localhost:$(shell grep GRPC_WEB_PORT .env | cut -d'=' -f2) >/dev/null && echo "$(GREEN)✓ gRPC-Web responding$(RESET)" || echo "$(RED)✗ gRPC-Web not responding$(RESET)"

# ===========================================
# HELP COMMAND
# ===========================================

help:
	@echo "$(BOLD)Available commands:$(RESET)"
	@echo ""
	@echo "$(YELLOW)🚀 Quick Start:$(RESET)"
	@echo "  make dev              Start development with hot reload"
	@echo "  make up               Start production environment"
	@echo ""
	@echo "$(YELLOW)📦 Development:$(RESET)"
	@echo "  make dev-up           Start dev environment"
	@echo "  make dev-up-detached  Start dev environment in background"
	@echo "  make dev-down         Stop dev environment"
	@echo "  make dev-logs         Show all dev logs"
	@echo "  make dev-logs-frontend Show frontend logs"
	@echo "  make dev-logs-backend  Show backend logs"
	@echo "  make dev-rebuild      Completely rebuild dev environment"
	@echo "  make dev-restart      Restart dev containers"
	@echo "  make dev-status       Show dev environment status"
	@echo ""
	@echo "$(YELLOW)🔧 Debugging:$(RESET)"
	@echo "  make dev-shell-frontend   Open frontend container shell"
	@echo "  make dev-shell-backend    Open backend container shell"
	@echo "  make dev-hotreload-test   Test hot reload functionality"
	@echo "  make dev-fix-permissions  Fix file permissions (Linux)"
	@echo ""
	@echo "$(YELLOW)🏭 Production:$(RESET)"
	@echo "  make up               Start production environment"
	@echo "  make down             Stop all services"
	@echo "  make logs             Show production logs"
	@echo "  make build-frontend   Build frontend image"
	@echo "  make build-server     Build backend image"
	@echo ""
	@echo "$(YELLOW)🧹 Cleanup:$(RESET)"
	@echo "  make clean            Clean development files"
	@echo "  make clean-all        Complete cleanup (Docker + files)"
	@echo "  make clean-volumes    Clean development volumes"
	@echo ""
	@echo "$(YELLOW)📊 Monitoring:$(RESET)"
	@echo "  make status           Show service status"
	@echo "  make test             Test API endpoints"
	@echo ""
	@echo "$(CYAN)For hot reload issues, try: make dev-rebuild$(RESET)"



# ===========================================
# SINGLE CONTAINER DEVELOPMENT COMMANDS
# ===========================================

dev: dev-up
	$(call print_success,"🚀 Integrated development environment started!")
	$(call print_status,"Backend: http://localhost:$(shell grep BACKEND_PORT .env | cut -d'=' -f2)")
	$(call print_status,"Frontend: http://localhost:$(shell grep FRONTEND_PORT .env | cut -d'=' -f2)")
	$(call print_status,"gRPC-Web: http://localhost:$(shell grep GRPC_WEB_PORT .env | cut -d'=' -f2)")

dev-up: clean-proto
	$(call print_status,"🏗️ Building and starting integrated development environment...")
	$(call print_warning,"All file watching and hot reload handled by Docker")
	docker-compose -f docker-compose.dev.yml up --build
	$(call print_success,"Development environment running!")

dev-up-detached: clean-proto
	$(call print_status,"🏗️ Starting development environment in background...")
	docker-compose -f docker-compose.dev.yml up --build -d
	$(call print_success,"Development environment running in background!")

dev-down:
	$(call print_status,"🛑 Stopping development environment...")
	docker-compose -f docker-compose.dev.yml down
	$(call print_success,"Development environment stopped!")

dev-logs:
	$(call print_status,"📋 Showing development logs...")
	docker-compose -f docker-compose.dev.yml logs -f

dev-logs-tail:
	$(call print_status,"📋 Showing recent development logs...")
	docker-compose -f docker-compose.dev.yml logs --tail=100 -f

dev-restart:
	$(call print_status,"🔄 Restarting development environment...")
	docker-compose -f docker-compose.dev.yml restart
	$(call print_success,"Development environment restarted!")

dev-rebuild: dev-clean
	$(call print_status,"🔨 Completely rebuilding development environment...")
	docker-compose -f docker-compose.dev.yml up --build --force-recreate
	$(call print_success,"Development environment rebuilt!")

dev-status:
	$(call print_status,"📊 Development environment status:")
	@docker-compose -f docker-compose.dev.yml ps
	@echo ""
	$(call print_status,"Health status:")
	@docker-compose -f docker-compose.dev.yml exec -T dev-environment curl -s http://localhost:$(shell grep FRONTEND_PORT .env | cut -d'=' -f2) >/dev/null && echo "$(GREEN)✓ Frontend responding$(RESET)" || echo "$(RED)✗ Frontend not responding$(RESET)"
	@docker-compose -f docker-compose.dev.yml exec -T dev-environment curl -s http://localhost:$(shell grep GRPC_WEB_PORT .env | cut -d'=' -f2) >/dev/null && echo "$(GREEN)✓ gRPC-Web responding$(RESET)" || echo "$(RED)✗ gRPC-Web not responding$(RESET)"

dev-clean: clean-proto
	$(call print_status,"🧹 Cleaning development environment...")
	docker-compose -f docker-compose.dev.yml down -v --remove-orphans
	$(call print_success,"Development environment cleaned!")

# ===========================================
# DEVELOPMENT DEBUGGING & UTILITIES
# ===========================================

dev-shell:
	$(call print_status,"🐚 Opening development container shell...")
	docker-compose -f docker-compose.dev.yml exec dev-environment bash

dev-shell-backend:
	$(call print_status,"🐚 Opening backend directory in container...")
	docker-compose -f docker-compose.dev.yml exec dev-environment bash -c "cd /app/server && bash"

dev-shell-frontend:
	$(call print_status,"🐚 Opening frontend directory in container...")
	docker-compose -f docker-compose.dev.yml exec dev-environment bash -c "cd /app/frontend && bash"

dev-proto-generate:
	$(call print_status,"🔧 Manually regenerating proto files...")
	docker-compose -f docker-compose.dev.yml exec dev-environment bash -c "cd /app && protoc --go_out=server/pb --go_opt=paths=source_relative --go-grpc_out=server/pb --go-grpc_opt=paths=source_relative --proto_path=proto proto/*.proto"
	docker-compose -f docker-compose.dev.yml exec dev-environment bash -c "cd /app && npx --prefix frontend grpc_tools_node_protoc --js_out=import_style=commonjs,binary:frontend/src/proto --proto_path=proto proto/*.proto"
	docker-compose -f docker-compose.dev.yml exec dev-environment bash -c "cd /app && npx --prefix frontend grpc_tools_node_protoc --grpc-web_out=import_style=commonjs,mode=grpcwebtext:frontend/src/proto --proto_path=proto proto/*.proto"
	$(call print_success,"Proto files regenerated!")

dev-test-hotreload:
	$(call print_status,"🔥 Testing hot reload functionality...")
	@echo "$(YELLOW)Adding test comments to trigger reload...$(RESET)"
	@echo "// Hot reload test $(shell date)" >> server/cmd/server/main.go
	@echo "<!-- Hot reload test $(shell date) -->" >> frontend/src/App.vue
	@echo "/* Hot reload test $(shell date) */" >> proto/user.proto
	$(call print_success,"Test modifications made! Check logs for reload activity with: make dev-logs")

dev-reset:
	$(call print_status,"🔄 Resetting development environment completely...")
	docker-compose -f docker-compose.dev.yml down -v --rmi all --remove-orphans
	docker system prune -f
	$(call print_success,"Development environment reset!")

dev-fix-permissions:
	$(call print_status,"🔧 Fixing file permissions for development...")
	@if [ "$(shell uname)" = "Linux" ]; then \
		sudo chown -R $(shell id -u):$(shell id -g) server/ frontend/ proto/; \
		$(call print_success,"Permissions fixed!"); \
	else \
		$(call print_warning,"Permission fix only needed on Linux"); \
	fi

# ===========================================
# DEVELOPMENT MONITORING
# ===========================================

dev-watch:
	$(call print_status,"👀 Watching development environment...")
	watch -n 2 'docker-compose -f docker-compose.dev.yml ps'

dev-ps:
	$(call print_status,"📋 Development container processes:")
	docker-compose -f docker-compose.dev.yml ps

dev-top:
	$(call print_status,"📊 Development container resource usage:")
	docker-compose -f docker-compose.dev.yml top

dev-exec:
	$(call print_status,"⚡ Execute command in development container:")
	@read -p "Command: " cmd; \
	docker-compose -f docker-compose.dev.yml exec dev-environment bash -c "$$cmd"

# ===========================================
# DEVELOPMENT TESTING
# ===========================================

dev-test-api:
	$(call print_status,"🧪 Testing API endpoints in development...")
	@echo "$(YELLOW)Testing frontend...$(RESET)"
	@docker-compose -f docker-compose.dev.yml exec -T dev-environment curl -s http://localhost:$(shell grep FRONTEND_PORT .env | cut -d'=' -f2) >/dev/null && echo "$(GREEN)✓ Frontend responding$(RESET)" || echo "$(RED)✗ Frontend not responding$(RESET)"
	@echo "$(YELLOW)Testing gRPC-Web...$(RESET)"
	@docker-compose -f docker-compose.dev.yml exec -T dev-environment curl -s http://localhost:$(shell grep GRPC_WEB_PORT .env | cut -d'=' -f2) >/dev/null && echo "$(GREEN)✓ gRPC-Web responding$(RESET)" || echo "$(RED)✗ gRPC-Web not responding$(RESET)"

dev-healthcheck:
	$(call print_status,"🏥 Running development health check...")
	docker-compose -f docker-compose.dev.yml exec dev-environment bash -c "curl -f http://localhost:$(shell grep FRONTEND_PORT .env | cut -d'=' -f2) && curl -f http://localhost:$(shell grep GRPC_WEB_PORT .env | cut -d'=' -f2)"
	$(call print_success,"Health check completed!")

# ===========================================
# HELP FOR DEVELOPMENT
# ===========================================

dev-help:
	@echo "$(BOLD)Development Commands:$(RESET)"
	@echo ""
	@echo "$(YELLOW)🚀 Quick Start:$(RESET)"
	@echo "  make dev              Start integrated development environment"
	@echo "  make dev-logs         Watch all development logs"
	@echo ""
	@echo "$(YELLOW)🔧 Management:$(RESET)"
	@echo "  make dev-up           Start development environment"
	@echo "  make dev-down         Stop development environment"
	@echo "  make dev-restart      Restart development environment"
	@echo "  make dev-rebuild      Rebuild development environment"
	@echo "  make dev-status       Show environment status"
	@echo ""
	@echo "$(YELLOW)🐚 Debugging:$(RESET)"
	@echo "  make dev-shell        Open container shell"
	@echo "  make dev-test-hotreload  Test hot reload"
	@echo "  make dev-proto-generate  Regenerate proto files"
	@echo ""
	@echo "$(CYAN)All file watching and hot reload is handled automatically by Docker!$(RESET)"
