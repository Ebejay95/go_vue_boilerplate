version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile.dev
    image: ${APP_NAME}-frontend-grpc-dev
    ports:
      - "${FRONTEND_PORT}:3000"
    networks:
      - app-network
    environment:
      - NODE_ENV=development
      - FRONTEND_PORT=3000
      - BASE_URL=${BASE_URL}
      - VUE_APP_GRPC_WEB_URL=${GRPC_WEB_URL}
      - GRPC_WEB_URL=${GRPC_WEB_URL}

      # Hot Reload Environment Variables
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=1000
      - WATCHPACK_POLLING=true
      - WEBPACK_WATCH_FILES_POLL=1000
      - WDS_SOCKET_HOST=localhost
      - WDS_SOCKET_PORT=3000
      - FAST_REFRESH=true

    volumes:
      # WICHTIG: Nur source files mounten, NICHT das proto directory
      - ./frontend/src/components:/app/src/components:cached
      - ./frontend/src/pages:/app/src/pages:cached
      - ./frontend/src/assets:/app/src/assets:cached
      - ./frontend/src/App.vue:/app/src/App.vue:cached
      - ./frontend/src/main.js:/app/src/main.js:cached
      - ./frontend/src/router.js:/app/src/router.js:cached
      # EXCLUDE: ./frontend/src/services and ./frontend/src/proto to preserve generated files

      - ./frontend/public:/app/public:cached
      - ./frontend/vue.config.dev.js:/app/vue.config.js:ro
      - ./frontend/tailwind.config.js:/app/tailwind.config.js:ro
      - ./frontend/package.json:/app/package.json:ro

      # Preserve node_modules and generated proto files in container
      - frontend-node-modules:/app/node_modules
      # DO NOT mount src/proto - let it stay in container with generated files

    container_name: ${APP_NAME}-frontend-grpc-dev
    command: ["npm", "run", "serve", "--", "--host", "0.0.0.0", "--port", "3000"]
    stdin_open: true
    tty: true
    restart: unless-stopped
    depends_on:
      - backend-grpc-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend-grpc-server:
    build:
      context: .
      dockerfile: ./server/Dockerfile.dev
    image: ${APP_NAME}-backend-grpc-server-dev
    ports:
      - "${BACKEND_PORT}:50051"
      - "${GRPC_WEB_PORT}:8081"
    networks:
      - app-network
    environment:
      - PORT=50051
      - WEB_PORT=8081
      - BACKEND_HOST=${BACKEND_HOST}
      - BACKEND_BASE_URL=${BACKEND_BASE_URL}
      - GRPC_WEB_URL=${GRPC_WEB_URL}
      - DEEPL_API_KEY=${DEEPL_API_KEY}
      - GO_ENV=development
      - GODEBUG=netdns=go
      - CGO_ENABLED=0
    container_name: ${APP_NAME}-backend-grpc-server-dev
    restart: unless-stopped
    volumes:
      - ./server:/app/server:cached
      - ./proto:/app/proto:ro
      - ./server/.air.toml:/app/.air.toml:ro
      - go-mod-cache:/go/pkg/mod
    command: ["go", "run", "./cmd/server"]
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50051"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  frontend-node-modules:
    driver: local
    name: ${APP_NAME}-frontend-node-modules-dev

  go-mod-cache:
    driver: local
    name: ${APP_NAME}-go-mod-cache-dev

networks:
  app-network:
    driver: bridge
    name: ${APP_NAME}-grpc-dev-network
