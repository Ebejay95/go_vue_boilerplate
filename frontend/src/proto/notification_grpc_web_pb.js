/**
 * @fileoverview gRPC-Web generated client stub for notification
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.19.1
// source: notification.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.notification = require('./notification_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.notification.NotificationServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.notification.NotificationServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification.CreateNotificationRequest,
 *   !proto.notification.CreateNotificationResponse>}
 */
const methodDescriptor_NotificationService_CreateNotification = new grpc.web.MethodDescriptor(
  '/notification.NotificationService/CreateNotification',
  grpc.web.MethodType.UNARY,
  proto.notification.CreateNotificationRequest,
  proto.notification.CreateNotificationResponse,
  /**
   * @param {!proto.notification.CreateNotificationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.notification.CreateNotificationResponse.deserializeBinary
);


/**
 * @param {!proto.notification.CreateNotificationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.notification.CreateNotificationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.notification.CreateNotificationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification.NotificationServiceClient.prototype.createNotification =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification.NotificationService/CreateNotification',
      request,
      metadata || {},
      methodDescriptor_NotificationService_CreateNotification,
      callback);
};


/**
 * @param {!proto.notification.CreateNotificationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.notification.CreateNotificationResponse>}
 *     Promise that resolves to the response
 */
proto.notification.NotificationServicePromiseClient.prototype.createNotification =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification.NotificationService/CreateNotification',
      request,
      metadata || {},
      methodDescriptor_NotificationService_CreateNotification);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification.GetNotificationRequest,
 *   !proto.notification.GetNotificationResponse>}
 */
const methodDescriptor_NotificationService_GetNotification = new grpc.web.MethodDescriptor(
  '/notification.NotificationService/GetNotification',
  grpc.web.MethodType.UNARY,
  proto.notification.GetNotificationRequest,
  proto.notification.GetNotificationResponse,
  /**
   * @param {!proto.notification.GetNotificationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.notification.GetNotificationResponse.deserializeBinary
);


/**
 * @param {!proto.notification.GetNotificationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.notification.GetNotificationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.notification.GetNotificationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification.NotificationServiceClient.prototype.getNotification =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification.NotificationService/GetNotification',
      request,
      metadata || {},
      methodDescriptor_NotificationService_GetNotification,
      callback);
};


/**
 * @param {!proto.notification.GetNotificationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.notification.GetNotificationResponse>}
 *     Promise that resolves to the response
 */
proto.notification.NotificationServicePromiseClient.prototype.getNotification =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification.NotificationService/GetNotification',
      request,
      metadata || {},
      methodDescriptor_NotificationService_GetNotification);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification.UpdateNotificationRequest,
 *   !proto.notification.UpdateNotificationResponse>}
 */
const methodDescriptor_NotificationService_UpdateNotification = new grpc.web.MethodDescriptor(
  '/notification.NotificationService/UpdateNotification',
  grpc.web.MethodType.UNARY,
  proto.notification.UpdateNotificationRequest,
  proto.notification.UpdateNotificationResponse,
  /**
   * @param {!proto.notification.UpdateNotificationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.notification.UpdateNotificationResponse.deserializeBinary
);


/**
 * @param {!proto.notification.UpdateNotificationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.notification.UpdateNotificationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.notification.UpdateNotificationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification.NotificationServiceClient.prototype.updateNotification =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification.NotificationService/UpdateNotification',
      request,
      metadata || {},
      methodDescriptor_NotificationService_UpdateNotification,
      callback);
};


/**
 * @param {!proto.notification.UpdateNotificationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.notification.UpdateNotificationResponse>}
 *     Promise that resolves to the response
 */
proto.notification.NotificationServicePromiseClient.prototype.updateNotification =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification.NotificationService/UpdateNotification',
      request,
      metadata || {},
      methodDescriptor_NotificationService_UpdateNotification);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification.DeleteNotificationRequest,
 *   !proto.notification.DeleteNotificationResponse>}
 */
const methodDescriptor_NotificationService_DeleteNotification = new grpc.web.MethodDescriptor(
  '/notification.NotificationService/DeleteNotification',
  grpc.web.MethodType.UNARY,
  proto.notification.DeleteNotificationRequest,
  proto.notification.DeleteNotificationResponse,
  /**
   * @param {!proto.notification.DeleteNotificationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.notification.DeleteNotificationResponse.deserializeBinary
);


/**
 * @param {!proto.notification.DeleteNotificationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.notification.DeleteNotificationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.notification.DeleteNotificationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification.NotificationServiceClient.prototype.deleteNotification =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification.NotificationService/DeleteNotification',
      request,
      metadata || {},
      methodDescriptor_NotificationService_DeleteNotification,
      callback);
};


/**
 * @param {!proto.notification.DeleteNotificationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.notification.DeleteNotificationResponse>}
 *     Promise that resolves to the response
 */
proto.notification.NotificationServicePromiseClient.prototype.deleteNotification =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification.NotificationService/DeleteNotification',
      request,
      metadata || {},
      methodDescriptor_NotificationService_DeleteNotification);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification.ListNotificationsRequest,
 *   !proto.notification.ListNotificationsResponse>}
 */
const methodDescriptor_NotificationService_ListNotifications = new grpc.web.MethodDescriptor(
  '/notification.NotificationService/ListNotifications',
  grpc.web.MethodType.UNARY,
  proto.notification.ListNotificationsRequest,
  proto.notification.ListNotificationsResponse,
  /**
   * @param {!proto.notification.ListNotificationsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.notification.ListNotificationsResponse.deserializeBinary
);


/**
 * @param {!proto.notification.ListNotificationsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.notification.ListNotificationsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.notification.ListNotificationsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification.NotificationServiceClient.prototype.listNotifications =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification.NotificationService/ListNotifications',
      request,
      metadata || {},
      methodDescriptor_NotificationService_ListNotifications,
      callback);
};


/**
 * @param {!proto.notification.ListNotificationsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.notification.ListNotificationsResponse>}
 *     Promise that resolves to the response
 */
proto.notification.NotificationServicePromiseClient.prototype.listNotifications =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification.NotificationService/ListNotifications',
      request,
      metadata || {},
      methodDescriptor_NotificationService_ListNotifications);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification.MarkNotificationAsReadRequest,
 *   !proto.notification.MarkNotificationAsReadResponse>}
 */
const methodDescriptor_NotificationService_MarkNotificationAsRead = new grpc.web.MethodDescriptor(
  '/notification.NotificationService/MarkNotificationAsRead',
  grpc.web.MethodType.UNARY,
  proto.notification.MarkNotificationAsReadRequest,
  proto.notification.MarkNotificationAsReadResponse,
  /**
   * @param {!proto.notification.MarkNotificationAsReadRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.notification.MarkNotificationAsReadResponse.deserializeBinary
);


/**
 * @param {!proto.notification.MarkNotificationAsReadRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.notification.MarkNotificationAsReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.notification.MarkNotificationAsReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification.NotificationServiceClient.prototype.markNotificationAsRead =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification.NotificationService/MarkNotificationAsRead',
      request,
      metadata || {},
      methodDescriptor_NotificationService_MarkNotificationAsRead,
      callback);
};


/**
 * @param {!proto.notification.MarkNotificationAsReadRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.notification.MarkNotificationAsReadResponse>}
 *     Promise that resolves to the response
 */
proto.notification.NotificationServicePromiseClient.prototype.markNotificationAsRead =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification.NotificationService/MarkNotificationAsRead',
      request,
      metadata || {},
      methodDescriptor_NotificationService_MarkNotificationAsRead);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification.MarkNotificationAsUnreadRequest,
 *   !proto.notification.MarkNotificationAsUnreadResponse>}
 */
const methodDescriptor_NotificationService_MarkNotificationAsUnread = new grpc.web.MethodDescriptor(
  '/notification.NotificationService/MarkNotificationAsUnread',
  grpc.web.MethodType.UNARY,
  proto.notification.MarkNotificationAsUnreadRequest,
  proto.notification.MarkNotificationAsUnreadResponse,
  /**
   * @param {!proto.notification.MarkNotificationAsUnreadRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.notification.MarkNotificationAsUnreadResponse.deserializeBinary
);


/**
 * @param {!proto.notification.MarkNotificationAsUnreadRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.notification.MarkNotificationAsUnreadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.notification.MarkNotificationAsUnreadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification.NotificationServiceClient.prototype.markNotificationAsUnread =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification.NotificationService/MarkNotificationAsUnread',
      request,
      metadata || {},
      methodDescriptor_NotificationService_MarkNotificationAsUnread,
      callback);
};


/**
 * @param {!proto.notification.MarkNotificationAsUnreadRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.notification.MarkNotificationAsUnreadResponse>}
 *     Promise that resolves to the response
 */
proto.notification.NotificationServicePromiseClient.prototype.markNotificationAsUnread =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification.NotificationService/MarkNotificationAsUnread',
      request,
      metadata || {},
      methodDescriptor_NotificationService_MarkNotificationAsUnread);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification.MarkAllNotificationsAsReadRequest,
 *   !proto.notification.MarkAllNotificationsAsReadResponse>}
 */
const methodDescriptor_NotificationService_MarkAllNotificationsAsRead = new grpc.web.MethodDescriptor(
  '/notification.NotificationService/MarkAllNotificationsAsRead',
  grpc.web.MethodType.UNARY,
  proto.notification.MarkAllNotificationsAsReadRequest,
  proto.notification.MarkAllNotificationsAsReadResponse,
  /**
   * @param {!proto.notification.MarkAllNotificationsAsReadRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.notification.MarkAllNotificationsAsReadResponse.deserializeBinary
);


/**
 * @param {!proto.notification.MarkAllNotificationsAsReadRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.notification.MarkAllNotificationsAsReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.notification.MarkAllNotificationsAsReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification.NotificationServiceClient.prototype.markAllNotificationsAsRead =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification.NotificationService/MarkAllNotificationsAsRead',
      request,
      metadata || {},
      methodDescriptor_NotificationService_MarkAllNotificationsAsRead,
      callback);
};


/**
 * @param {!proto.notification.MarkAllNotificationsAsReadRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.notification.MarkAllNotificationsAsReadResponse>}
 *     Promise that resolves to the response
 */
proto.notification.NotificationServicePromiseClient.prototype.markAllNotificationsAsRead =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification.NotificationService/MarkAllNotificationsAsRead',
      request,
      metadata || {},
      methodDescriptor_NotificationService_MarkAllNotificationsAsRead);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification.DeleteReadNotificationsRequest,
 *   !proto.notification.DeleteReadNotificationsResponse>}
 */
const methodDescriptor_NotificationService_DeleteReadNotifications = new grpc.web.MethodDescriptor(
  '/notification.NotificationService/DeleteReadNotifications',
  grpc.web.MethodType.UNARY,
  proto.notification.DeleteReadNotificationsRequest,
  proto.notification.DeleteReadNotificationsResponse,
  /**
   * @param {!proto.notification.DeleteReadNotificationsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.notification.DeleteReadNotificationsResponse.deserializeBinary
);


/**
 * @param {!proto.notification.DeleteReadNotificationsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.notification.DeleteReadNotificationsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.notification.DeleteReadNotificationsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification.NotificationServiceClient.prototype.deleteReadNotifications =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification.NotificationService/DeleteReadNotifications',
      request,
      metadata || {},
      methodDescriptor_NotificationService_DeleteReadNotifications,
      callback);
};


/**
 * @param {!proto.notification.DeleteReadNotificationsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.notification.DeleteReadNotificationsResponse>}
 *     Promise that resolves to the response
 */
proto.notification.NotificationServicePromiseClient.prototype.deleteReadNotifications =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification.NotificationService/DeleteReadNotifications',
      request,
      metadata || {},
      methodDescriptor_NotificationService_DeleteReadNotifications);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification.GetNotificationStatsRequest,
 *   !proto.notification.GetNotificationStatsResponse>}
 */
const methodDescriptor_NotificationService_GetNotificationStats = new grpc.web.MethodDescriptor(
  '/notification.NotificationService/GetNotificationStats',
  grpc.web.MethodType.UNARY,
  proto.notification.GetNotificationStatsRequest,
  proto.notification.GetNotificationStatsResponse,
  /**
   * @param {!proto.notification.GetNotificationStatsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.notification.GetNotificationStatsResponse.deserializeBinary
);


/**
 * @param {!proto.notification.GetNotificationStatsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.notification.GetNotificationStatsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.notification.GetNotificationStatsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification.NotificationServiceClient.prototype.getNotificationStats =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification.NotificationService/GetNotificationStats',
      request,
      metadata || {},
      methodDescriptor_NotificationService_GetNotificationStats,
      callback);
};


/**
 * @param {!proto.notification.GetNotificationStatsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.notification.GetNotificationStatsResponse>}
 *     Promise that resolves to the response
 */
proto.notification.NotificationServicePromiseClient.prototype.getNotificationStats =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification.NotificationService/GetNotificationStats',
      request,
      metadata || {},
      methodDescriptor_NotificationService_GetNotificationStats);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.notification.SendRealtimeNotificationRequest,
 *   !proto.notification.SendRealtimeNotificationResponse>}
 */
const methodDescriptor_NotificationService_SendRealtimeNotification = new grpc.web.MethodDescriptor(
  '/notification.NotificationService/SendRealtimeNotification',
  grpc.web.MethodType.UNARY,
  proto.notification.SendRealtimeNotificationRequest,
  proto.notification.SendRealtimeNotificationResponse,
  /**
   * @param {!proto.notification.SendRealtimeNotificationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.notification.SendRealtimeNotificationResponse.deserializeBinary
);


/**
 * @param {!proto.notification.SendRealtimeNotificationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.notification.SendRealtimeNotificationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.notification.SendRealtimeNotificationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.notification.NotificationServiceClient.prototype.sendRealtimeNotification =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/notification.NotificationService/SendRealtimeNotification',
      request,
      metadata || {},
      methodDescriptor_NotificationService_SendRealtimeNotification,
      callback);
};


/**
 * @param {!proto.notification.SendRealtimeNotificationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.notification.SendRealtimeNotificationResponse>}
 *     Promise that resolves to the response
 */
proto.notification.NotificationServicePromiseClient.prototype.sendRealtimeNotification =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/notification.NotificationService/SendRealtimeNotification',
      request,
      metadata || {},
      methodDescriptor_NotificationService_SendRealtimeNotification);
};


module.exports = proto.notification;

